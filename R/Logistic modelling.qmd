---
title: "Logistic modelling"
format: html
editor: visual
---

## Logistic modelling

The Aps1 is the APACHE score, which is a score given to patients in the ICU based on their vital scores, age and overall health, this score estimates the mortality of the patient based on how ill they are usually this ranges from 0-71, but in this data set the min and max are 3-147.

We wish to model what scores indicates death and what scores indicate you will survive for the two different scores.

```{r}
library(tidyverse)
library(base)
library(patchwork)
library(scales)
library(ggridges)
library(patchwork)
library(ggseqlogo)
library(dplyr)
library(table1)
library(broom)
library(purrr)
```

```{r}
rhc_aug |> 
  select(ptID, aps1, death) |> 
  ggplot(aes(x = aps1, fill=factor(death))) +
  geom_bar(position = "stack") 
  
  
```

```{r}
rhc_aug |> 
  select(ptID, aps1_Interval, death) |> 
  ggplot(aes(x = aps1_Interval, fill=factor(death))) +
  geom_bar(position = "stack") 

  
```

It looks like there might be a correlation between a higher aps1 score and dying.we will now try and model this.

### **Logistic modelling**

First we try to do the prediction based on one of the diseases that was reason for admission (card).

```{r}

aps1_card<-rhc_aug |> 
  filter(Diagnosis=='card')


my_first_model <- glm(formula = death ~ aps1,
                      data = aps1_card, family='binomial')

my_first_model
```

```{r}
aps1_card |> 
  group_by(death) |> 
  summarise(mu=mean(aps1))

```

The intercept means that each time the APACHE score increases by one, the chance of dying increases with e\^2,5 this is roughly 2.5%.

```{r}
my_first_model |> 
  summary()
```

It seams that it is statistically significant.

We will now try to model the death based on the aps1 for all the diseases.

```{r}
aps1_data_nested <- aps1_data |> 
  group_by(Diagnosis) |> 
  nest() |> 
  ungroup()
aps1_data_nested
```

```{r}
aps1_data_nested |> 
  filter(Diagnosis == "card") |> 
  pull()
```

```{r}

aps1_data_nested <- aps1_data_nested |> 
                      mutate(model_object = map(.x = data,
                                                .f = ~glm(formula = death ~ aps1, 
                                             data = .x, family='binomial')))

aps1_data_nested
```

```{r}

aps1_data_nested |>   
  filter(Diagnosis == "card") |> 
    pull(model_object) |> 
    pluck(1) |>
    tidy(conf.int = TRUE,
       conf.level = 0.95)
```

```{r}
aps1_data_nested

aps1_data_nested |> filter(Diagnosis == "ortho") |> 
  pull(model_object)
```

```{r}
aps1_data_nested |> 
  mutate(model_object_tidy = map(.x = model_object, 
                                 .f=~tidy(x=.x,
                                       conf.int = TRUE,
                                        conf.level = 0.95)))


aps1_data_nested <- aps1_data_nested |>
  group_by(Diagnosis)|>
  filter(Diagnosis != "ortho") |> 
  mutate(model_object_tidy = 
           map(.x = model_object,
               .f = ~tidy(
                 conf.int = TRUE,
                 conf.level = 0.95,
                 x = .x)))

```

```{r}
aps1_estimates <- aps1_data_nested |>  
                    unnest(cols = model_object_tidy)
aps1_estimates
```

```{r}
aps1_estimates <- aps1_estimates |> 
                        select(c(Diagnosis, 
                                 p.value, 
                                 estimate, 
                                 conf.low, 
                                 conf.high))
aps1_estimates
```

```{r}
aps1_estimates <- aps1_estimates |>
                    
                mutate(q.value = map_dbl(.x=p.value,
                                     .f = ~p.adjust(
                                                .x, 
                                                method = 'fdr'))) |>   
                mutate(is_significant = case_when(
                                          q.value > 0.05 ~ 'no',
                                          q.value <= 0.05 ~ 'yes'))
aps1_estimates
```

```{r}
aps1_estimates |>
  ggplot(mapping = aes(x = estimate,
                       y = fct_reorder(Diagnosis,
                                       estimate))) +
  geom_point() +
  geom_errorbarh(aes(xmin = conf.low, 
                     xmax = conf.high)) +
  geom_vline(xintercept = 0) +
  labs(x='Estimates(95% CIs)', 
       y='',
       title = '')
```

```{r}
aps1_estimates |> 
  mutate(label = case_when(is_significant == "no" ~ ' ',
                            is_significant == "yes" ~ Diagnosis))|> 
  ggplot(mapping = aes(x = estimate,
                       y=-log10(p.value), color=is_significant)) +
  geom_point()+
  geom_text_repel(aes(label=label))+
  labs(x='Estimates', 
       y='aps1')
```

```{r}
#Augumented data

  #| label: function-for-words-to-binary
# Creating a general function that can be used for yes and no columns
create_binary_column <- function(x) {
  ifelse(x == "Yes", 1, 
  ifelse(x == "No", 0, x))
}

#Creates one column with all diseases that is reason for admission to the hospital, instead of them all being present for all patients.
rhc_clean_long <- rhc_clean |>
    
  mutate(across(resp:ortho, 
                ~create_binary_column(.))) |>
  pivot_longer(cols = resp:ortho,
               names_to = "Diagnosis",
               values_to = "Values")|> 
  filter(Values==1) |> 
  
   group_by(ptID) |> 
  mutate(Diagnosis = paste(unique(Diagnosis), collapse = ",")) |> 
  ungroup() 
  

#makes one value for patients with multiple diagnosis as reason for admission and delete repeated columns
rhc_aug1 <- rhc_clean_long |>
  mutate(Diagnosis=
           case_when(str_detect(Diagnosis, 
                                pattern=",",
                                negate=FALSE)==TRUE ~ "multiple diagnosis", 
                     str_detect(Diagnosis, 
                                pattern=",",
                                negate=FALSE)==FALSE ~ Diagnosis )) |> 
  unique.data.frame() |> 
  mutate(aps1_Interval = cut(aps1, breaks = c(0,15,30,45,60,75,90,105,120,135,150), labels = c("0-15", "15-30", "30-45", "45-60", "60-75","75-90", "90-105", "105-120", "120-135", "135-150")))

#Add a column with the number of comorbidities each patient has.
rhc_aug1<- rhc_aug1 |>
  rowwise() |> 
  mutate(comorbidities=sum(c_across(cardiohx:amihx)))
```
